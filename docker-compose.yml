services:
  db:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - .env
    networks:
      - budget_network
  backend:
    build: ./backend
    ports:
      - "${BACKEND_PORT}:3001"
    volumes:
      - ./backend:/app
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${DB_PORT}/${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      DB_HOST: ${DB_HOST}
    depends_on:
      - db
    env_file:
      - .env
    command: sh -c "npm install && npm run build && npm run migrate && npm run seed && npm run dev"
    networks:
      - budget_network
  frontend:
    build: ./frontend
    ports:
      - "${FRONTEND_PORT}:5173"
    volumes:
      - ./frontend:/app
    environment:
      VITE_BACKEND_URL: ${VITE_BACKEND_URL}
    depends_on:
      - backend
    env_file:
      - .env
    command: sh -c "npm install && npm run dev"
    networks:
      - budget_network

  adminer:
    image: adminer # משתמש באימג' הרשמי של Adminer
    container_name: budget_adminer # שם לקונטיינר (אופציונלי)
    restart: always
    ports:
      - "8080:8080" # מאפשר גישה מהדפדפן המקומי ב-localhost:8080
    depends_on: # אופציונלי, אבל מומלץ לחכות ל-DB
      - db
    networks: # חייב להיות באותה רשת כמו ה-DB
      - budget_network

networks:
  budget_network:
    driver: bridge
volumes:
  db_data:
